// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package autoshock

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func Index(apikey string, code string, user string, name string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<!doctype html><html class=\"no-js\" lang=\"\"><head><meta charset=\"utf-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"><title></title>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = autoshock_css().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<meta name=\"description\" content=\"\"><meta property=\"og:title\" content=\"\"><meta property=\"og:type\" content=\"\"><meta property=\"og:url\" content=\"\"><meta property=\"og:image\" content=\"\"><link rel=\"apple-touch-icon\" href=\"icon.png\"><link rel=\"manifest\" href=\"site.webmanifest\"><meta name=\"theme-color\" content=\"#fafafa\"></head><body><form id=\"shockerForm\"><h1>AutoShock</h1><label for=\"shockerSelect\">Choose shockers:</label> <select id=\"shockerSelect\" multiple required><option value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(code)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `autoshock/autoshock.templ`, Line: 32, Col: 23}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">Shocker 1</option> <option value=\"YOURSHARECODE\">Empty</option> <option value=\"YOURSHARECODE\">Empty 2</option></select> <label for=\"modeSelect\">Choose mode:</label> <select id=\"modeSelect\" required><option value=\"0\">Shock</option> <option value=\"1\">Vibrate</option> <option value=\"2\" selected=\"selected\">Beep</option></select> <label>Duration:</label><div class=\"range-input-container\"><label for=\"minDurationInput\"></label> <input type=\"number\" id=\"minDurationInput\" step=\"1\" min=\"1\" max=\"15\" placeholder=\"min\" required> <span class=\"range-dash\">-</span> <label for=\"maxDurationInput\"></label> <input type=\"number\" id=\"maxDurationInput\" step=\"1\" min=\"1\" max=\"15\" placeholder=\"max\" required></div><label>Intensity:</label><div class=\"range-input-container\"><label for=\"minIntensityInput\"></label> <input type=\"number\" id=\"minIntensityInput\" step=\"1\" min=\"1\" max=\"100\" placeholder=\"min\" required> <span class=\"range-dash\">-</span> <label for=\"maxIntensityInput\"></label> <input type=\"number\" id=\"maxIntensityInput\" step=\"1\" min=\"1\" max=\"100\" placeholder=\"max\" required></div><label>Delay:</label><div class=\"range-input-container\"><label for=\"minDelayInput\"></label> <input type=\"number\" id=\"minDelayInput\" step=\"1\" min=\"1\" placeholder=\"min\" required> <span class=\"range-dash\">-</span> <label for=\"maxDelayInput\"></label> <input type=\"number\" id=\"maxDelayInput\" step=\"1\" min=\"1\" placeholder=\"max\" required></div><button id=\"startButton\" type=\"button\">Start</button></form><div id=\"runningLoopsContainer\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("key", apikey).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("user", user).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.JSONScript("name", name).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = autoshock_JS().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</body></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func autoshock_JS() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<script type=\"text/javascript\">\r\nconst ENDPOINT = \"https://do.pishock.com/api/apioperate/\";\r\nconst APIKEY = JSON.parse(document.getElementById(\"key\").textContent);\r\nconst USER = JSON.parse(document.getElementById(\"user\").textContent);\r\nconst NAME = JSON.parse(document.getElementById(\"name\").textContent);\r\n\r\nlet runningLoops = [];\r\n\r\nfunction startLoop() {\r\n  // Get the codes to run it on\r\n  let selectBox = document.getElementById('shockerSelect');\r\n  let codes = [];\r\n  for (let i = 0; i < selectBox.options.length; i++) {\r\n    if (selectBox.options[i].selected) {\r\n      codes.push(selectBox.options[i])\r\n    }\r\n  }\r\n\r\n  // Form options into object\r\n  const options = {\r\n    running: true,\r\n    currentTimeout: null,\r\n    codes: codes,\r\n    operation: parseInt(document.getElementById(\"modeSelect\").value),\r\n    minIntensity: parseInt(document.getElementById(\"minIntensityInput\").value),\r\n    maxIntensity: parseInt(document.getElementById(\"maxIntensityInput\").value),\r\n    minDuration: parseInt(document.getElementById(\"minDurationInput\").value),\r\n    maxDuration: parseInt(document.getElementById(\"maxDurationInput\").value),\r\n    minDelay: parseInt(document.getElementById(\"minDelayInput\").value),\r\n    maxDelay: parseInt(document.getElementById(\"maxDelayInput\").value)\r\n  }\r\n\r\n  // Check ranges are valid\r\n  if (options.minIntensity > options.maxIntensity || options.minDuration > options.maxDuration || options.minDelay > options.maxDelay) {\r\n    alert(\"Minimum can't be higher than maximum\");\r\n    return;\r\n  }\r\n\r\n  runningLoops.push(options)\r\n  updateRunningLoopsList()\r\n  loop(options)\r\n}\r\n\r\nfunction updateRunningLoopsList() {\r\n  const loopsContainer = document.getElementById(\"runningLoopsContainer\");\r\n  loopsContainer.innerHTML = \"\"; // Clear the previous list\r\n\r\n  runningLoops.forEach((loopData, index) => {\r\n    if (!loopData.running) return;\r\n    const loopItem = document.createElement(\"div\");\r\n    loopItem.classList.add(\"loop-item\");\r\n    loopItem.innerHTML = `\r\n      <strong>${loopData.codes.map(function (code) { return code.text }).join(\", \")}</strong><br>\r\n      <span>${optionsToString(loopData)}</span><br>\r\n      <button type=\"button\" class=\"stopButton\">Stop</button>\r\n    `;\r\n\r\n    const button = loopItem.querySelector(\".stopButton\");\r\n    button.addEventListener(\"click\", () => stopLoopByIndex(index))\r\n\r\n    loopsContainer.appendChild(loopItem);\r\n  });\r\n}\r\n\r\nfunction optionsToString(opt) {\r\n  if (opt.operation === 2) {\r\n    return `Beeping every ${opt.minDelay}-${opt.maxDelay}s`\r\n  }\r\n\r\n  return `${operationToString(opt.operation)} every ${opt.minDelay}-${opt.maxDelay}s for ${opt.minDuration}-${opt.maxDuration}s at ${opt.minIntensity}-${opt.maxIntensity}`\r\n}\r\n\r\nfunction operationToString(opcode) {\r\n  if (opcode === 0) return \"Shocking\";\r\n  if (opcode === 1) return \"Vibrating\";\r\n  return \"Beeping\";\r\n}\r\n\r\nfunction stopLoopByIndex(index) {\r\n  const loopData = runningLoops[index];\r\n  if (loopData) {\r\n    loopData.running = false;\r\n    clearTimeout(loopData.currentTimeout)\r\n    updateRunningLoopsList();\r\n  }\r\n}\r\n\r\n\r\nfunction loop(options) {\r\n  if (!options.running) return;\r\n  doOperation(options);\r\n\r\n  let rand = Math.random() * (options.maxDelay - options.minDelay) + options.minDelay;\r\n  options.currentTimeout = setTimeout(function () {\r\n    loop(options);\r\n  }, rand * 1000)\r\n}\r\n\r\nfunction doOperation(options) {\r\n  for (let i = 0; i < options.codes.length; i++) {\r\n    let payload = {\r\n      Username: USER,\r\n      Code: options.codes[i].value,\r\n      Apikey: APIKEY,\r\n      Name: NAME,\r\n      Op: options.operation,\r\n      Duration: Math.floor(Math.random() * (options.maxDuration - options.minDuration + 1) + options.minDuration),\r\n      Intensity: Math.floor(Math.random() * (options.maxIntensity - options.minIntensity + 1) + options.minIntensity)\r\n    }\r\n\r\n    fetch(ENDPOINT, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(payload)\r\n    })\r\n      .catch(error => console.error('Exception: ', error));\r\n  }\r\n}\r\n\r\ndocument.getElementById('startButton').addEventListener('click', function (e) {\r\n  let form = document.getElementById(\"shockerForm\");\r\n  if (!form.checkValidity()) {\r\n    form.reportValidity();\r\n  }\r\n  else {\r\n    e.preventDefault();\r\n    startLoop();\r\n  }\r\n})\r\n\r\n</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func autoshock_css() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "<style type=\"text/css\">\r\n\r\n    /*! HTML5 Boilerplate v9.0.0-RC1 | MIT License | https://html5boilerplate.com/ */\r\n\r\n/* main.css 3.0.0 | MIT License | https://github.com/h5bp/main.css#readme */\r\n/*\r\n * What follows is the result of much research on cross-browser styling.\r\n * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,\r\n * Kroc Camen, and the H5BP dev community and team.\r\n */\r\n\r\n/* ==========================================================================\r\n   Base styles: opinionated defaults\r\n   ========================================================================== */\r\n\r\nhtml {\r\n  color: #222;\r\n  font-size: 1em;\r\n  line-height: 1.4;\r\n}\r\n\r\n/*\r\n * Remove text-shadow in selection highlight:\r\n * https://twitter.com/miketaylr/status/12228805301\r\n *\r\n * Customize the background color to match your design.\r\n */\r\n\r\n::-moz-selection {\r\n  background: #b3d4fc;\r\n  text-shadow: none;\r\n}\r\n\r\n::selection {\r\n  background: #b3d4fc;\r\n  text-shadow: none;\r\n}\r\n\r\n/*\r\n * A better looking default horizontal rule\r\n */\r\n\r\nhr {\r\n  display: block;\r\n  height: 1px;\r\n  border: 0;\r\n  border-top: 1px solid #ccc;\r\n  margin: 1em 0;\r\n  padding: 0;\r\n}\r\n\r\n/*\r\n * Remove the gap between audio, canvas, iframes,\r\n * images, videos and the bottom of their containers:\r\n * https://github.com/h5bp/html5-boilerplate/issues/440\r\n */\r\n\r\naudio,\r\ncanvas,\r\niframe,\r\nimg,\r\nsvg,\r\nvideo {\r\n  vertical-align: middle;\r\n}\r\n\r\n/*\r\n * Remove default fieldset styles.\r\n */\r\n\r\nfieldset {\r\n  border: 0;\r\n  margin: 0;\r\n  padding: 0;\r\n}\r\n\r\n/*\r\n * Allow only vertical resizing of textareas.\r\n */\r\n\r\ntextarea {\r\n  resize: vertical;\r\n}\r\n\r\n/* ==========================================================================\r\n   Author's custom styles\r\n   ========================================================================== */\r\n\r\n/* ==========================================================================\r\n   Helper classes\r\n   ========================================================================== */\r\n\r\n/*\r\n * Hide visually and from screen readers\r\n */\r\n\r\n.hidden,\r\n[hidden] {\r\n  display: none !important;\r\n}\r\n\r\n/*\r\n * Hide only visually, but have it available for screen readers:\r\n * https://snook.ca/archives/html_and_css/hiding-content-for-accessibility\r\n *\r\n * 1. For long content, line feeds are not interpreted as spaces and small width\r\n *    causes content to wrap 1 word per line:\r\n *    https://medium.com/@jessebeach/beware-smushed-off-screen-accessible-text-5952a4c2cbfe\r\n */\r\n\r\n.visually-hidden {\r\n  border: 0;\r\n  clip: rect(0, 0, 0, 0);\r\n  height: 1px;\r\n  margin: -1px;\r\n  overflow: hidden;\r\n  padding: 0;\r\n  position: absolute;\r\n  white-space: nowrap;\r\n  width: 1px;\r\n  /* 1 */\r\n}\r\n\r\n/*\r\n * Extends the .visually-hidden class to allow the element\r\n * to be focusable when navigated to via the keyboard:\r\n * https://www.drupal.org/node/897638\r\n */\r\n\r\n.visually-hidden.focusable:active,\r\n.visually-hidden.focusable:focus {\r\n  clip: auto;\r\n  height: auto;\r\n  margin: 0;\r\n  overflow: visible;\r\n  position: static;\r\n  white-space: inherit;\r\n  width: auto;\r\n}\r\n\r\n/*\r\n * Hide visually and from screen readers, but maintain layout\r\n */\r\n\r\n.invisible {\r\n  visibility: hidden;\r\n}\r\n\r\n/*\r\n * Clearfix: contain floats\r\n *\r\n * The use of `table` rather than `block` is only necessary if using\r\n * `::before` to contain the top-margins of child elements.\r\n */\r\n\r\n.clearfix::before,\r\n.clearfix::after {\r\n  content: \"\";\r\n  display: table;\r\n}\r\n\r\n.clearfix::after {\r\n  clear: both;\r\n}\r\n\r\n/* ==========================================================================\r\n   EXAMPLE Media Queries for Responsive Design.\r\n   These examples override the primary ('mobile first') styles.\r\n   Modify as content requires.\r\n   ========================================================================== */\r\n\r\n@media only screen and (min-width: 35em) {\r\n  /* Style adjustments for viewports that meet the condition */\r\n}\r\n\r\n@media print,\r\n  (-webkit-min-device-pixel-ratio: 1.25),\r\n  (min-resolution: 1.25dppx),\r\n  (min-resolution: 120dpi) {\r\n  /* Style adjustments for high resolution devices */\r\n}\r\n\r\n/* ==========================================================================\r\n   Print styles.\r\n   Inlined to avoid the additional HTTP request:\r\n   https://www.phpied.com/delay-loading-your-print-css/\r\n   ========================================================================== */\r\n\r\n@media print {\r\n  *,\r\n  *::before,\r\n  *::after {\r\n    background: #fff !important;\r\n    color: #000 !important;\r\n    /* Black prints faster */\r\n    box-shadow: none !important;\r\n    text-shadow: none !important;\r\n  }\r\n\r\n  a,\r\n  a:visited {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  a[href]::after {\r\n    content: \" (\" attr(href) \")\";\r\n  }\r\n\r\n  abbr[title]::after {\r\n    content: \" (\" attr(title) \")\";\r\n  }\r\n\r\n  /*\r\n   * Don't show links that are fragment identifiers,\r\n   * or use the `javascript:` pseudo protocol\r\n   */\r\n  a[href^=\"#\"]::after,\r\n  a[href^=\"javascript:\"]::after {\r\n    content: \"\";\r\n  }\r\n\r\n  pre {\r\n    white-space: pre-wrap !important;\r\n  }\r\n\r\n  pre,\r\n  blockquote {\r\n    border: 1px solid #999;\r\n    page-break-inside: avoid;\r\n  }\r\n\r\n  tr,\r\n  img {\r\n    page-break-inside: avoid;\r\n  }\r\n\r\n  p,\r\n  h2,\r\n  h3 {\r\n    orphans: 3;\r\n    widows: 3;\r\n  }\r\n\r\n  h2,\r\n  h3 {\r\n    page-break-after: avoid;\r\n  }\r\n}\r\n\r\n\r\n/* Custom */\r\n\r\nform {\r\n  max-width: 400px;\r\n  margin: 0 auto;\r\n}\r\n\r\nform div {\r\n  margin-bottom: 15px;\r\n}\r\n\r\nlabel {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n}\r\n\r\ninput,\r\nselect {\r\n  width: 100%;\r\n  padding: 8px;\r\n  margin-bottom: 15px;\r\n  box-sizing: border-box;\r\n}\r\n\r\nselect[multiple] {\r\n  overflow: hidden;\r\n  height: auto;\r\n}\r\n\r\nbody {\r\n  background-color: #000;\r\n  color: #fff;\r\n  font-family: Consolas, serif;\r\n}\r\n\r\nbody input,\r\nbody select,\r\nbody textarea {\r\n  background-color: #18191c;\r\n  color: #dcddde;\r\n  border: 1px solid #000;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n}\r\n\r\nbutton {\r\n  color: #fff;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 15px;\r\n  cursor: pointer;\r\n  margin-top: 10px;\r\n}\r\n\r\n#startButton {\r\n  background-color: #3ba55c;\r\n  margin-right: 20px;\r\n}\r\n\r\n#startButton:hover {\r\n  background-color: #2f844a;\r\n}\r\n\r\n.stopButton {\r\n  background-color: #ed4245;\r\n}\r\n\r\n.stopButton:hover {\r\n  background-color: #dd1519;\r\n}\r\n\r\n.range-input-container {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.range-input-container input {\r\n  flex: 1;\r\n}\r\n\r\n.range-dash {\r\n  margin: 0 20px;\r\n  line-height: 1.6;\r\n}\r\n\r\nh1 {\r\n  text-align: center;\r\n}\r\n\r\n#runningLoopsContainer {\r\n  max-width: 400px;\r\n  margin: 30px auto 0;\r\n}\r\n\r\n.loop-item {\r\n  background-color: #18191c;\r\n  color: #dcddde;\r\n  border: 1px solid #ccc;\r\n  border-radius: 5px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n</style>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
